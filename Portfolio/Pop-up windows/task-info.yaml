type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello, World!</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the hstest/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        let selector = 'button[class="open-window"]';
        page.evaluate((selector) => document.querySelector(selector).click(), selector);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - check if the document has the header
            () => {
                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                return hs.correct();
            },

            // Test #2 - check if the document has at least one <nav> element
            () => {
                let nav = document.getElementsByTagName('nav');

                if (nav === null || nav.length === 0) {
                    return hs.wrong('Cannot find the nav element on your web page.');
                }

                return hs.correct();
            },

            // Test #3 - check if the document has the <h1> element
            () => {
                let headings1 = document.getElementsByTagName('h1');

                if (headings1 === null || headings1.length === 0) {
                    return hs.wrong('Cannot find h1 element on your web page.');
                }

                let header = headings1[0]
                let title = header.textContent || header.innerText;

                if (!title || title.length === 0) {
                    return hs.wrong('Cannot find a text within h1 element');
                }

                return hs.correct();
            },

            // Test #4 - check if the document has the <footer> element
            () => {
                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (footers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                return hs.correct();
            },

            // Test #5 - check if the document has at least three section elements
            () => {
                let sections = document.getElementsByTagName('section');

                if (sections === null || sections.length < 3) {
                    return hs.wrong(`Cannot find tree sections elements. There are only ${sections.length}.`);
                }

                return hs.correct();
            },

            // Test #6 - check the "about me" section
            () => {
                let sections = document.getElementById('about');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "about" id.');
                }

                return hs.correct();
            },

            // Test #7 - check the "portfolio" section
            () => {
                let sections = document.getElementById('portfolio');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "portfolio" id.');
                }

                return hs.correct();
            },

            // Test #8 - check the "contacts" section
            () => {
                let sections = document.getElementById('contacts');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "contacts" id.');
                }

                return hs.correct();
            },

            // Test #9 - check header and footer background colors
            // Test #9 - check header and footer background colors
            () => {
                function getRealColor(elem) {
                    try {
                        while (elem) {
                            let color = window.getComputedStyle(elem).backgroundColor;
                            if (color !== "rgba(0, 0, 0, 0)") {
                                let match = color.match(/^rgba?\((\d+), (\d+), (\d+)(, [\d.]+)?\)$/i);
                                return {
                                    red: Number(match[1]),
                                    green: Number(match[2]),
                                    blue: Number(match[3]),
                                    hex: Number(match[1]) * 65536 + Number(match[2]) * 256 + Number(match[3])
                                };
                            }
                            elem = elem.parentElement;
                        }
                    } catch (e) {
                        return null;
                    }
                    return null;
                }

                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                let hasBackgroundImage = getComputedStyle(headers[0]).background.includes('url');

                let headerBack = getRealColor(headers[0]);
                let noCustomHeaderColor = headerBack === null || headerBack.hex === 0xFFFFFF;
                if (noCustomHeaderColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like header's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                hasBackgroundImage = getComputedStyle(footers[0]).background.includes('url');

                let footerBack = getRealColor(footers[0]);
                let noCustomFooterColor = footerBack === null || footerBack.hex === 0xFFFFFF;
                if (noCustomFooterColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like footer's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                return hs.correct()
            },

            // Test #10 - check click button and show popup window
            () => {
                let buttons = document.getElementsByClassName('open-window');

                if (buttons === null || buttons.length === 0) {
                    return hs.wrong('Cannot find a button with the class "open-window" to open the pop-up window.');
                }

                let forms = document.getElementsByClassName('window');

                if (forms === null || forms.length === 0) {
                    return hs.wrong('Cannot find the element with the class "window".');
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/img/instagram 1.svg
  visible: true
  text: |
    <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M26.0649 0H9.93443C4.45659 0 0 4.4568 0 9.93464V26.0651C0 31.5432 4.45659 35.9998 9.93443 35.9998H26.0649C31.5432 35.9998 35.9998 31.543 35.9998 26.0651V9.93464C36 4.4568 31.5432 0 26.0649 0ZM32.8059 26.0651C32.8059 29.782 29.782 32.8057 26.0651 32.8057H9.93443C6.2178 32.8059 3.19408 29.782 3.19408 26.0651V9.93464C3.19408 6.21801 6.2178 3.19408 9.93443 3.19408H26.0649C29.7818 3.19408 32.8057 6.21801 32.8057 9.93464V26.0651H32.8059Z" fill="#CBD1D2"/>
    <path d="M17.9999 8.72412C12.8849 8.72412 8.72366 12.8854 8.72366 18.0004C8.72366 23.1151 12.8849 27.2762 17.9999 27.2762C23.1149 27.2762 27.2761 23.1151 27.2761 18.0004C27.2761 12.8854 23.1149 8.72412 17.9999 8.72412ZM17.9999 24.0819C14.6463 24.0819 11.9177 21.3537 11.9177 18.0001C11.9177 14.6464 14.6461 11.918 17.9999 11.918C21.3537 11.918 24.0821 14.6464 24.0821 18.0001C24.0821 21.3537 21.3535 24.0819 17.9999 24.0819Z" fill="#CBD1D2"/>
    <path d="M27.6652 6.01575C27.0498 6.01575 26.4452 6.26489 26.0106 6.70141C25.5739 7.1358 25.3228 7.74055 25.3228 8.35807C25.3228 8.97367 25.5741 9.5782 26.0106 10.0147C26.445 10.4491 27.0498 10.7004 27.6652 10.7004C28.2827 10.7004 28.8853 10.4491 29.3218 10.0147C29.7584 9.5782 30.0075 8.97346 30.0075 8.35807C30.0075 7.74055 29.7584 7.1358 29.3218 6.70141C28.8874 6.26489 28.2827 6.01575 27.6652 6.01575Z" fill="#CBD1D2"/>
    </svg>
  learner_created: true
- name: src/style.css
  visible: true
  text: |
    * {
        margin: 0;
        padding: 0;
    }

    body {
    }

    header {
        background-image: url("./img/bg.jpg");
        height: 100vh;
    }

    header h1 {
        color: aliceblue;
    }

    nav {
        height: 50px;
        background-color: maroon;
        font-size: larger;
    }

    nav .flex-container {
        position: relative;
        width: 50%;
        left: 50%;
        background-color: saddlebrown;
        list-style-type: none;
        display: flex;
        justify-content: space-between;
        align-items: stretch;
    }

    nav .flex-item {
        text-align: center;
    }

    header h1 {
        position: relative;
        top: 70%;
        left: 10%;
    }

    nav a {
        color: antiquewhite;
    }

    #about {
        background-color: bisque;
    }

    .about-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }

    .about-left {
        display: inline;
    }

    .about-left-background {
        position: relative;
        top: 10%;
        left: 10%;
        width: 80%;
        z-index: 0;
    }

    .about-left-foreground {
        position: relative;
        top: -30%;
        left: 60%;
        width: 80%;
        z-index: 1;
    }

    .about-left img {
        max-width: 100%;
        height: auto;
    }

    .about-text {
        position: relative;
        top: 30%;
        left: 30%;
        width: 50%;
    }

    #portfolio {
        background-color: blanchedalmond;
    }

    #portfolio h2 {
        text-align: center;
    }

    .portfolio-container {
        display: flex;
        justify-content: center;
    }

    .portfolio-item {
        width: 30%;
        margin: 50px;
    }

    .portfolio-item img {
        max-width: 100%;
        height: auto;
    }

    .portfolio-item figcaption {
        text-align: center;
    }

    #contacts {
        text-align: center;
    }

    footer {
        height: 50px;
        background-color: darkslategray;
        text-align: center;
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/137/stages/733/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 06 Mar 2021 07:02:57 UTC
record: -1
